#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const fse = require('fs-extra');
const semver = require('semver');
const dotenv = require('dotenv');
const exec = require('child_process').exec;

const logger = require('./core/utils/logger');
const colorize = require('./core/utils/colorize');

const patch = from => {
  const splitted = semver.clean(from).split('.');
  return `${splitted[0]}.${splitted[1]}.${Number(splitted[2]) + 1}`;
};

const minor = from => {
  const splitted = semver.clean(from).split('.');
  return `${splitted[0]}.${Number(splitted[1]) + 1}.0`;
};

const major = from => {
  const splitted = semver.clean(from).split('.');
  return `${Number(splitted[0]) + 1}.0.0`;
};

// calcul des versions
const rootcwd = path.join(__dirname, '..');
const mainpkg = require(path.join(rootcwd, 'package.json'));
const opts = { spaces: 2 };
const currentversion = mainpkg.version;
const workspaces = mainpkg.workspaces || [];

const arg = process.argv[2] || false;
const isvalid = !arg
  ? false
  : arg === 'patch' || (semver.valid(arg) && semver.gt(arg, currentversion));
let numto = patch(currentversion);
if (isvalid) numto = semver.clean(arg);
else if (!isvalid && arg && arg === 'minor') numto = minor(currentversion);
else if (!isvalid && arg && arg === 'major') numto = major(currentversion);
else if (!isvalid && arg && (arg !== 'major' || arg !== 'minor')) {
  logger.error(
    `Requires a valid semver term (x.x.x, minor, major) greater than ${currentversion}`,
    'bump'
  );
  logger.error('Script aborted', 'bump');
  process.exit(0);
}

if (!numto) {
  logger.error(`${numto} is not a valid semver\n`);
  process.exit(1);
}

async function createcommit(version) {
  const message = `git add -A . && git ci -m "ðŸš€  bump version v${version}"`;
  const execoptions = { encoding: 'utf8', cwd: path.join(rootcwd) };
  await exec(message, execoptions, error => {
    if (error) {
      console.log(error);
      logger.error('Unable to commit changes\n', 'bump');
      process.exit(1);
    } else {
      logger.ok(`Packages updated to version ${version}\n`, 'bump');
      process.exit(0);
    }
  });
}
async function updateenvfiles(version) {
  // FIXME -> endline for specific OS
  const endline = '\n';
  const varname = 'REACT_APP_VERSION';
  const allfiles = [
    // update all package.json with a new version number
    path.join(rootcwd, '.env.local'),
    path.join(rootcwd, '.env.production'),
    path.join(rootcwd, '.env.development'),
  ];
  await Promise.all(
    allfiles.map(
      fp =>
        fse.pathExistsSync(fp) &&
        fse.readFile(fp, { encoding: 'utf-8' }).then(data => {
          const content = data
            .split(endline)
            .filter(l => l)
            .map(line => {
              if (line.indexOf(varname) < 0) return line;
              const [key] = line.split('=');
              return `${key}=${version}`;
            })
            .join(endline);
          return fse.outputFile(fp, content);
        })
    )
  )
    .then(() => true)
    .catch(err => {
      // console.log(err);
      logger.error('Unable to update env files versions\n', 'bump');
      process.exit(1);
    });
}
async function updatepackages(version) {
  const allfiles = [
    // update all package.json with a new version number
    path.join(rootcwd, 'package.json'),
    ...workspaces.map(pth => path.join(rootcwd, pth, 'package.json')),
  ];
  await Promise.all(
    allfiles.map(filepath =>
      fse.readJson(filepath).then(data => {
        const update = { version };
        // write package.json
        return fse.outputJson(filepath, Object.assign({}, data, update), opts);
      })
    )
  )
    .then(() => true)
    .catch(err => {
      console.log(err);
      logger.error('Unable to update packages versions\n', 'bump');
      process.exit(1);
    });
}
updatepackages(numto);
updateenvfiles(numto);
createcommit(numto);
